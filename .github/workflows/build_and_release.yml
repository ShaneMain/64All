name: Build and Release

on:
  push:
    branches:
      - main
      - development
      - '**'
  workflow_dispatch:

permissions:
  contents: write  # Ensure GITHUB_TOKEN has write permissions

jobs:
  build:
    runs-on: ubuntu-latest

    container:
      image: fedora:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Dependencies on Fedora
        run: |
          dnf update -y
          dnf install -y curl git make gcc bzip2 zlib-devel openssl-devel readline-devel sqlite-devel tk-devel file

      - name: Install pyenv and Dependencies
        run: |
          curl https://pyenv.run | bash
          echo 'export PATH="$HOME/.pyenv/bin:$PATH"' >> ~/.bashrc
          echo 'eval "$(pyenv init --path)"' >> ~/.bashrc
          echo 'eval "$(pyenv init -)"' >> ~/.bashrc
          echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.bashrc

      - name: Install Python and Virtualenv
        shell: bash
        run: |
          source ~/.bashrc
          pyenv install 3.11.5
          pyenv virtualenv 3.11.5 venv-3.11.5

      - name: Set up Poetry
        shell: bash
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc

      - name: Install dependencies using Poetry
        shell: bash
        run: |
          source ~/.bashrc
          pyenv activate venv-3.11.5
          poetry install --no-root

      - name: Install PyInstaller
        shell: bash
        run: |
          source ~/.bashrc
          pyenv activate venv-3.11.5
          pip install pyinstaller

      - name: Run build script
        shell: bash
        run: |
          source ~/.bashrc
          pyenv activate venv-3.11.5
          chmod +x ./scripts/build.sh
          ./scripts/build.sh

      - name: Generate unique tag
        id: generate_tag
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          TAG_NAME="${GITHUB_REF_NAME}-${TIMESTAMP}"
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          body: Automated release for ${{ env.TAG_NAME }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/64All
          asset_name: 64All
          asset_content_type: application/octet-stream